#!/usr/bin/env python

# This program attempts to make an HTML file suitable for offline use.
# Its name is, according to Google Translate, derived from the Welsh word for
# "disconnected".

from common import to_from, mkdir_if_needed, download_if_needed

import argparse
from lxml import etree
import re
import os
import shutil

def massage_url(url, mime_type, reason):
# Return a URL to use in place of the given one.  Download the file to a local
# directory and return a relative link to that.
  cached_name = download_if_needed(url, mime_type, reason)
  local_name = os.path.join(files_dir, os.path.basename(cached_name))
  mkdir_if_needed(os.path.dirname(local_name))
  to_from(reason, cached_name, local_name)
  shutil.copy2(cached_name, local_name)
  return local_name


def expand_file(filename):
# Perform offline expansion of the given file: Read it, modify it, and write it
# back.

  # Read the file.
  to_from('offline', filename, None)
  text = open(filename, 'r').read()
  
  expand_text(filename, text)

def expand_text(filename, text):
# Perform offline expansion of the given text: Modify it, and write it
# back.  Details depend on the file type.
  current_dir = os.path.split(filename)[0] + '/'
  if re.search(r'html$', filename, re.I):
    new_text = expand_html(text, current_dir)
  elif re.search(r'css$', filename, re.I):
    new_text = expand_css(text, current_dir)
  else:
    print "Don't know how to expand %s.  Ignoring." % filename
    new_text = text

  # If the file has changed, write it back out.
  if new_text != text:
    to_from('offline', None, filename)
    print >>open(filename, 'w'), new_text


def expand_html(text, current_dir):
# Perform offline expansion of the given HTML text.  Recursively expand any
# dependencies we find, and return the modified document.
  tree = etree.HTML(text)

  # Traverse the parse tree looking for things to expand.
  for element in tree.iter():
    # Anything with a src attribute: Download the source.
    if 'src' in element.attrib:
      url = element.get('src')
      url = massage_url(url, None, element.tag + ' src')
      element.attrib['src'] = url

    # Style: Download external styles.
    if element.tag == 'link' and 'href' in element.attrib:
      element.attrib['href'] = massage_url(element.get('href'), None, 'link href')
    
    # Style: Process any embedded styles.
    if element.tag == 'style':
      element.text = expand_css(element.text, current_dir)

  # Done.
  return etree.tostring(tree, doctype="", method="html")

def expand_css(text, current_dir):
# Expand a CSS style sheet.

  # Download any @imports.
  def match_css_import(match):
    url = massage_url(match.group(1), 'text/css', 'css import')
    expand_file(url)
    url = re.sub('^' + current_dir, '', url)
    return "@import '%s';" % url
  text = re.sub(
    "@import '([^']*)';",
    match_css_import,
    text
  )

  # Download and url(...)s.
  def match_css_url(match):
    url = massage_url(match.group(1), None, 'css url')
    url = re.sub('^' + current_dir, '', url)
    return "url(%s)" % url

  text = re.sub(
    r"url\((http[^\)]*)\)",
    match_css_url,
    text
  )
  
  return text



def main():
  # Set up command-line options.
  global args
  arg_parser = argparse.ArgumentParser()
  arg_parser.add_argument(dest='input_filename', help='input filename')
  args = arg_parser.parse_args()

  # Make sure we have reasonable filenames.
  args.job_name = re.sub('\.html$', '', args.input_filename)

  # We'll want an empty directory for all of the files that go with the HTML.
  global files_dir
  files_dir = args.job_name + "-files"
  if not os.path.exists(files_dir):
    os.makedirs(files_dir)
  else:
    for f in os.listdir(files_dir):
      x = os.path.join(files_dir, f)
      to_from('clean offline files', x, '(removed)')
      os.unlink(x)

  expand_file(args.input_filename)

  # All done!
  pass

if __name__ == '__main__':
  main()
