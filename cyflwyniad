#!/usr/bin/env python

# This program generates HTML presentations based in reveal.js, from a certain
# custom input format.

import argparse
import re
import sys
import urllib2
import StringIO
import os
import hashlib # For turning URLs into well-behaved filenames.
import time
import subprocess
import mimetypes
import shutil

import datgysylltu
import hunangynhwysol

from common import complain, get_file, to_from, mkdir_if_needed, download_if_needed

# Parser states.
class S:
  initial = 'initial' # The initial state.  Next should be a major section heading.
  config = 'config'   # Configuration for reveal.js.  Just raw characters.
  style = 'style'     # Top-level CSS.  Just raw characters.
  script = 'script'   # A raw script to insert into the page.
  slides = 'slides'   # At the start of a slides section.  Need a slide title next.
  in_slide = 'inside slide' # Ready for the content of a slide.
  inline_math = 'inline math'    # Within a slide, inside an inline math nugget.

## Each kind of token is defined by a function like this:
# def token_xxx(x, state, doc):
#   return None
# Does this given string start with this token, and is it appropriate here?
#   If yes, modify the document as appropriate, and return a tuple of the
#    match object and the next state.
#   If no, return None.

def token_comment(x, state, doc):
  # Comments.
  match = re.search('^\n\s*\/\/(.*)', x)
  if not match: return None
  return (match, state)

def token_style(x, state, doc):
  # Start of a style section.
  match = re.search(r'^\[style\]', x)
  if not match: return None
  return (match, S.style)

def token_config(x, state, doc):
  # Start of a config section.
  match = re.search(r'^\[config\]', x)
  if not match: return None
  return (match, S.config)

def token_script(x, state, doc):
  # Start of a script section.
  match = re.search(r'^\[script\]', x)
  if not match: return None
  return (match, S.script)

def token_include(x, state, doc):
  match = re.search (r'^#include (.*)', x)
  if not match: return None

  filename = match.group(1)
  to_from('include', filename, None)
  included_doc = Document(doc.debug)
  included_doc.process_cy(filename)
  doc.append(included_doc)

  return (match, state)

def token_external_script(x, state, doc):
  match = re.search (r'^#script (.*)', x)
  if not match: return None
  doc.script_includes.append(match.groups(1))
  return (match, state)

def token_slides(x, state, doc):
  # Start of a slides section.
  match = re.search(r'^\[slides\]', x)
  if not match: return None
  return (match, S.slides)

def token_slide_title(x, state, doc):
  if state != S.slides and state != S.in_slide: return None
  match = re.search(r'^#{3,}\s*([^#\n]*?)\s*#{3,}', x)
  if not match: return None

  if state == S.in_slide:
    doc.slides += "</div></center>"
    doc.pop_tag('slide-body')
    doc.slides += "</section>"
    doc.pop_tag('section')

  doc.slides += "<section>"
  doc.slides += "<h1>" + match.group(1) + "</h1>"
  doc.push_tag("section")
  doc.slides += "<center><div class=slide-body>"
  doc.push_tag("slide-body")
  doc.slide_number += 1

  return (match, S.in_slide)


def token_begin_center(x, state, doc):
  # Begin and end center tags.
  if state != S.in_slide: return None
  match = re.search(r'^>>>', x)
  if not match: return None

  doc.slides += "<div style='text-align: center'>"
  doc.push_tag('center')
  return (match, state)

def token_end_center(x, state, doc):
  if state != S.in_slide: return None
  match = re.search(r'^<<<', x)
  if not match: return None

  doc.slides += "</div>"
  doc.pop_tag('center')
  return (match, state)

def token_begin_div(x, state, doc):
  # Start a div with one or more classes.
  if state != S.in_slide: return None
  match = re.search(r'^!([a-zA-Z_:=0-9\[\];"\'%+-]*){',x)
  if not match: return None

  text = match.group(1)
  match2 = re.match(r'^(.*)\[(.*)\]', text)
  if match2:
    div_class = match2.group(1)
    div_attrs = match2.group(2)
  else:
    div_class = text
    div_attrs = ''
  div_class = re.sub(r'\+', ' ', div_class)
  doc.slides += "<div class='%s' %s>" % (div_class, div_attrs)
  doc.push_tag('div')

  return (match, state)

def token_end_group(x, state, doc):
  # End any of the groups that are delimited by curly braces.
  if state != S.in_slide: return None
  match = re.search(r'^}',x)
  if not match: return None

  # We need to add the right closing tag to the output.  Check the tag stack to
  # see what kind of thing we're closing.
  tag, line = doc.tag_stack[-1]
  if tag == 'div':
    doc.pop_tag('div')
    doc.slides += "</div>"
  elif tag == 'ul':
    doc.pop_tag('ul')
    doc.slides += "</ul>"
  elif tag == 'ol':
    doc.pop_tag('ol')
    doc.slides += "</ol>"
  else:
    complain("I see a group closure, but the matching tag is %s on line %s, which is not a group." % (tag, line)) 

  return (match, state)


def token_media(x, state, doc):
  # Media: Either an image or a video.
  if state != S.in_slide: return None
  match = re.search(r'^\[\[([^\]]*)\]\]', x)
  if not match: return None
  
  (src, attrs) = re.search('^(\S*)\s*(.*)', match.group(1)).groups(0)
  lower_src = src.lower()
  if '.png' in lower_src:
    tag = 'img'
  elif '.jpeg' in lower_src or '.jpg' in lower_src:
    tag = 'img'
  elif '.svg' in lower_src:
    tag = 'img'
  elif '.mp4' in lower_src:
    tag = 'video'
  else:
    complain("Can't determine whether " + src + " is an image or a video.")
  doc.slides += "<%s src='%s' %s></%s>" % (tag, src, attrs, tag)
  return (match, state)
  
def token_inline_math(x, state, doc):
  # Inline math delimiter.  No change, but toggle into or out of math mode,
  # which affects how the next part of the input is parsed.
  if state != S.in_slide and state != S.inline_math: return None
  match = re.search(r'^(\$)', x)
  if not match: return None

  doc.slides += '$' 

  if state == S.in_slide:
    return (match, S.inline_math)
  else:
    return (match, S.in_slide)

 
def token_emdash(x, state, doc):
  # Em dash, only inside slides.
  if state != S.in_slide: return None
  match = re.search(r'^---', x)
  if not match: return None
  
  doc.slides += "&mdash;";
  return (match, state)

def token_character(x, state, doc):
  # Last resort: A single character.
  match = re.search(r'^(.)', x, re.DOTALL)
  if not match: return None

  # Add this character to the appropriate section of the document.
  c = match.group(1)
  if state == S.style:
    doc.style += c
  elif state == S.config:
    doc.config += c
  elif state == S.script:
    doc.script += c
  elif state == S.slides or state == S.in_slide or state == S.inline_math:
    doc.slides += c
  elif state == S.initial and c.isspace():
    pass
  else:
    complain("Don't know what to do with a character in state %s" % state)

  return (match, state)



# A list of all of the token functions, ordered by precedence.  It's tempting
# to build this automatically from all of the functions with token_* names, but
# the order can be important.
tokens = [
  token_comment,
  token_style,
  token_config,
  token_script,
  token_slides,
  token_include,
  token_external_script,
  token_slide_title,
  token_media,
  token_begin_center,
  token_end_center,
  token_begin_div,
  token_end_group,
  token_inline_math,
  token_emdash,
  token_character
]

# Sanity check: Verify that all of the token_* functions are in the list.
for name in globals().keys():
  if 'token_' in name and globals()[name] not in tokens:
    complain('Token function %s is not in tokens list.' % name)

class Document:
  def __init__(self, _debug):
    # These are the components of the document that we'll assemble into the
    # final HTML file.
    self.config = ""
    self.style = ""
    self.script = ""
    self.script_includes = list()
    self.slides = ""
    self.slide_number = 0
    self.start_slide_number = 0
    self.is_bold = False
    self.is_ital = False
    self.tag_stack = list()
    self.debug = _debug

  def append(self, doc):
    # Append the contents of another document to this one.
    self.config += doc.config
    self.style += doc.style
    self.script += doc.script
    self.script_includes += doc.script_includes
    self.slides += doc.slides
    self.slide_number += doc.slide_number
    self.start_slide_number = max(self.start_slide_number, self.slide_number + doc.start_slide_number)

  def process_cy(self, input_filename):
    # Read the given input file, append its contents to the current document.

    # Check spelling.
    if input_filename != '-':
      ret = subprocess.call(['ispell', '-p', '.ispell_default', input_filename])
      if ret !=0:
        complain(input_filename + ": Failed spell check.")

    # Read the input file.
    if input_filename != '-':
      f = open(input_filename, 'r')
    else:
      f = sys.stdin
    x = f.read()

    # Hallucinate a newline at the start.  This allows patterns that match the
    # start of a line to work by looking for a newline, even for the very first
    # line.
    x = '\n' + x

    # Process this input, one token at a time.
    state = S.initial
    self.line = 1
    while len(x) > 0:
      for token in tokens:
        # Try this token.
        r = token(x, state, self)
        
        # Did it work?
        if r:
          # Yes.  Remove the matched part from the string.
          (match, new_state) = r
          eaten = match.group(0)
          if self.debug:
            print "On line %d, in state %s, %s matched %s." % (self.line, state, token.__name__, eaten.__repr__())
          self.line += eaten.count('\n')
          state = new_state
          x = x[len(eaten):]

          # Go back to the start of the token list.
          break

  # These are used to make sure that we opens and closes of various tags are
  # matched.
  def push_tag(self, tag):
    self.tag_stack.append((tag, self.line))

  def pop_tag(self, tag):
    (old_tag, old_line) = self.tag_stack.pop()
    if old_tag != tag:
      complain("Closing %s tag on line %d mismatches with the opening %s tag on line %d." % (tag, self.line, old_tag, old_line))

  def render(self, source_file_name):
    return '''
    <!-- Generated by cyflwyniad from %s on %s. -->
    <html>
      <head>
        <link rel='stylesheet' href="http://cdn.rawgit.com/hakimel/reveal.js/3.3.0/css/reveal.css">
        <style>
          %s
        </style>
      </head> 
      <body>
        <div class=reveal>
          <div class=slides>
            %s
          </div>
        </div>
      </body>
      <script src="http://cdn.rawgit.com/hakimel/reveal.js/3.3.0/js/reveal.js"></script>
      %s
      <script>
        
        %s

        Reveal.initialize({
          %s
        });
        Reveal.slide( %s );
      </script>
    </html>
  ''' % (
      source_file_name,
      time.strftime("%c"),
      self.style,
      self.slides,
      "\n".join(map(lambda x: "<script src='%s'></script>" % x, self.script_includes)),
      self.script,
      self.config,
      self.start_slide_number
    )


def main():
  # Sort out the command line.
  global args
  parser = argparse.ArgumentParser()
  parser.add_argument(dest='input_filename', help='input filename')
  parser.add_argument('--debug', '-d', dest='debug', help='show debugging information', action='store_true')
  parser.add_argument('--output', '-o', dest='output_filename', help='output filename', default=None)
  expand_opts = parser.add_mutually_exclusive_group(required=False)
  expand_opts.add_argument('--offline', dest='offline', help='Try to allow offline viewing by downloading linked files.', action='store_true') 
  expand_opts.add_argument('--onefile', dest='onefile', help='Try make a fully self-contained html file using data URLs.', action='store_true') 
  args = parser.parse_args()

  # Make sure we have reasonable filenames.
  if not args.output_filename:
    if args.input_filename != '-':
      args.output_filename = re.sub('\.cy$', '.html', args.input_filename)
    else:
      args.output_filename = '-'
  if args.input_filename == args.output_filename and args.input_filename != '-':
    complain('Input and output filenames are the same.')
  args.job_name = re.sub('\.cy$', '', args.input_filename)

  # Start with an empty document, then parse the input file.
  to_from('main input', args.input_filename, None)
  doc = Document(args.debug)
  doc.process_cy(args.input_filename)

  # Build the HTML page based on these components.
  html = doc.render(args.input_filename)

  # Save the rendered page.
  to_from('final output', None, args.output_filename)

  if args.output_filename != '-':
    f = open(args.output_filename, 'w')
  else:
    f = sys.stdout
  print >>f, html
  if args.output_filename != '-':
    f.close()

  # If we're in offline mode or onefile mode, make the appropriate
  # transformations.
  if args.onefile:
    html = hunangynhwysol.expand_onefile_text(html)
  if args.offline:
    datgysylltu.init(args.job_name + '-files')
    html = datgysylltu.expand_text(args.output_filename, html)
    datgysylltu.done()


if __name__ == '__main__':
  main()
